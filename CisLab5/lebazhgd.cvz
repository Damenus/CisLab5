using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace CisLab5
{
    public partial class Form1 : Form
    {
        public Form1()
        {
            InitializeComponent();
        }

        private void Form1_Load(object sender, EventArgs e)
        {

        }

        private void tasks_Click(object sender, EventArgs e)
        {
            int n = Int32.Parse(textBox1.Text);
            int k = Int32.Parse(textBox2.Text);

            Task mainTask = Task.Run(
                () =>
                {
                    Task<int> taskA = Task.Run(
                        () =>
                        {
                            int licznik = 1;
                            int warunek = n - k + 1;

                            for (int i = n; i >= warunek; i--)
                            {
                                licznik = licznik * i;
                            }


                            return licznik;
                        }
                    );

                    Task<int> taskB = Task.Run(
                        () =>
                        {
                            int mianownik = 1;

                            for (int i = 1; i <= k; i++)
                            {
                                mianownik = mianownik * i;
                            }

                            return mianownik;
                        }
                    );

                    Task<int>[] work = new Task<int>[] { taskA, taskB };

                    Task<double> finalTask = Task.Factory.ContinueWhenAll(work,
                        (tasks) =>
                        {
                            Task<int>[] task = (Task<int>[])tasks;
                            double wynik = task[0].Result / task[1].Result;
                            
                            return wynik;
                        }
                    );                    
                    finalTask.Wait();

                    Thread.Sleep(10000);
                    if (textBox3.InvokeRequired)
                    {
                        textBox3.BeginInvoke((Action)(() => textBox3.Text = finalTask.Result.ToString()));
                    }
                                               
                }
                
            );
           

        }

        private void Delegates_Click(object sender, EventArgs e)
        {
            
        }

        async Task<int> taskA(int n, int k)
        {
            int licznik = 1;
            int warunek = n - k + 1;

            for (int i = n; i >= warunek; i--)
            {
                licznik = licznik * i;
            }
            
            return licznik;
        }


        async Task<int> taskB(int n, int k)
        {
            int mianownik = 1;

            for (int i = 1; i <= k; i++)
            {
                mianownik = mianownik * i;
            }

            return mianownik;
        }

        async Task<double> finalTask()
        {

            double wynik = 10;

            return wynik;
        }
                         
        private async void async_Click(object sender, EventArgs e)
        {
            int n = Int32.Parse(textBox1.Text);
            int k = Int32.Parse(textBox2.Text);

            double result = await finalTask();
            textBox5.Text = result.ToString();

        }
    }
}
